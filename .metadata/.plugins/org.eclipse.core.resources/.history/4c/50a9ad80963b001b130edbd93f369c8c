
public class Segmento {

	//CONSTRUCTORES
	
	/**
	 * Constructor Segmento default.
	 * Posición Punto 1 = (1.0,1.0)
	 * Posición Punto 2 = (-1.0,-1.0)
	 */
	public Segmento () {
		this(1.0,1.0,-1.0,-1.0);
	}
	
	/**
	 * 
	 * @param x Punto 1, posición x.
	 * @param y Punto 1, posición y.
	 * @param a Punto 2, posición x.
	 * @param b Punto 2, posición y.
	 */
	public Segmento (double x, double y, double a, double b) {
		puntoA = new Punto (x,y);
		puntoB = new Punto (a,b);
	}
	
	/**
	 * 
	 * @param x Punto 1, posición x.
	 * @param y Punto 1, posición y.
	 * @param a Punto 2, posición x.
	 */
	public Segmento (double x, double y, double a) {
		this (x,y,a,-1.0);
	}
	
	/**
	 * 
	 * @param x Punto 1, posición x.
	 * @param y Punto 1, posición y.
	 */
	public Segmento (double x, double y) {
		this (x,y,-1.0,-1.0);
	}
	
	/**
	 * 
	 * @param x Punto 1, posición x.
	 */
	public Segmento (double x) {
		this (x,1.0,-1.0,-1.0);
	}
	
	/**
	 * 
	 * @param s Segmento a copiar.
	 */
	public Segmento (Segmento s) {
		this (s.getAX(),s.getAY(),s.getBX(),s.getBY());
	}
	//ATRIBUTOS
	private Punto puntoA;
	private Punto puntoB;
	
	//MÉTODOS SET/GET
	
	/**
	 * 
	 * @return Posición x del punto A.
	 */
	private double getAX() {
		return puntoA.getX();
	}
	
	/**
	 * 
	 * @return Posición y del punto A.
	 */
	private double getAY() {
		return puntoA.getY();
	}
	
	/**
	 * 
	 * @return Posición x del punto B.
	 */
	private double getBX() {
		return puntoB.getX();
	}
	
	/**
	 * 
	 * @return Posición y del punto B.
	 */
	private double getBY() {
		return puntoB.getY();
	}
	
	//Métodos de cálculo.
	
	/**
	 * 
	 * @return Pendiente.
	 */
	public double calculaPendiente() {
		return (getBY()-getAY())/(getBX()-getAX());
	}
	
	/**
	 * 
	 * @param s Segmento de comparación.
	 * @return Boolean. Paralelos o no.
	 */
	public boolean sonParalelos(Segmento s) {
		return calculaPendiente()==s.calculaPendiente();
	}
	

}
